/**
 * 
数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。

 

示例 1：

输入：n = 3
输出：["((()))","(()())","(())()","()(())","()()()"]
示例 2：

输入：n = 1
输出：["()"]
 

提示：

1 <= n <= 8
 */

// 首先，面向小白：什么是动态规划？在此题中，动态规划的思想类似于数学归纳法，当知道所有 i<n 的情况时，我们可以通过某种算法算出 i=n 的情况。
// 本题最核心的思想是，考虑 i=n 时相比 n-1 组括号增加的那一组括号的位置。

// 思路：
// 当我们清楚所有 i<n 时括号的可能生成排列后，对与 i=n 的情况，我们考虑整个括号排列中最左边的括号。
// 它一定是一个左括号，那么它可以和它对应的右括号组成一组完整的括号 "( )"，我们认为这一组是相比 n-1 增加进来的括号。


// 那么，剩下 n-1 组括号有可能在哪呢？

// 【这里是重点，请着重理解】

// 剩下的括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。

// 既然知道了 i<n 的情况，那我们就可以对所有情况进行遍历：

// "(" + 【i=p时所有括号的排列组合】 + ")" + 【i=q时所有括号的排列组合】 （i为括号对数）

// 其中 p + q = n-1 即 q = n - q - 1 ，且 p q 均为非负整数。

// 事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0 后，所有情况就遍历完了。

// 注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2) 时，按上述方式取的括号组合一定不同。

// 作者：yuyu-13
// 链接：https://leetcode.cn/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
/**
 * @param {number} n
 * @return {string[]}
 */
 var generateParenthesis = function(n) {
    if(n == 0) return []
    if(n == 1) return ["()"]

    let dp = [[""],["()"]]
    let p ,q ;
    for(let i = 2 ; i <=n ; i++){
        dp[i] = []
        for(let j = 0 ; j <i ; j++){
            for(p of dp[j]){
                for( q of dp[i - j - 1]){
                    dp[i].push( "(" + p + ")" + q )
                }
            }
        }
    }
    return dp[n]
};

console.log(generateParenthesis(4))